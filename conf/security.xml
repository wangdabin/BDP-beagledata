<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
      http://www.springframework.org/schema/security 
      http://www.springframework.org/schema/security/spring-security-3.2.xsd
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<!-- 
	session-fixation-protection : 
	session 策略
	none 使得session固化攻击失效，不会配置SessionManagementFilter（除非其它的<session-management>属性不是默认值）
	migrateSession 当用户经过认证后分配一个新的session，它保证原session的所有属性移到新session中。我们将在后面的章节中讲解，通过基于bean的方式如何进行这样的配置。
	newSession 当用户认证后，建立一个新的session，原（未认证时）session的属性不会进行移到新session中来。
	 -->
	<http entry-point-ref="restAuthenticationEntryPoint" auto-config="true" use-expressions="true">
	    <!-- 
		<intercept-url pattern="/login-page.html" access="ROLE_ANONYMOUS"/>
        <intercept-url pattern="/**" access="ROLE_USER" />
         -->
         
		<form-login 
			authentication-success-handler-ref="BDPSuccessHandler"
			authentication-failure-handler-ref="BDPFailureHandler"
	        login-processing-url="/j_spring_security_check" />
	        <!-- 
	        default-target-url="/static-page.html" 
	         -->
		<logout />
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="bdpFilter" />
		<session-management session-fixation-protection="none"/>
	</http>

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="bdpFilter" class="com.joe.user.auth.BDPFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="BDPAccessDecisionManagerBean" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<beans:bean id="BDPSuccessHandler"
		class="com.joe.user.auth.BDPSavedRequestAwareAuthenticationSuccessHandler" />
	<beans:bean id="BDPFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" />

	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="daoAuthenticationProvider">
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="BDPUserDetailService" />
	</beans:bean>

	<beans:bean id="BDPUserDetailService"
		class="com.joe.user.service.impl.UserServiceImpl" />
		
	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="BDPAccessDecisionManagerBean"
		class="com.joe.user.auth.BDPAccessDecisionManager">
	</beans:bean>

	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource" 
		class="com.joe.user.auth.BDPInvocationSecurityMetadataSource">
		<beans:property name="matcher" value="bdp" />  
	</beans:bean>

</beans:beans>